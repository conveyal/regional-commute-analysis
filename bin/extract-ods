#!/usr/bin/env node

var args = require('minimist')(process.argv.slice(2), {
  string: 'destinations'
});

var fs = require('fs');
var haversine = require('haversine');
var resolve = require('path').resolve;
var centroids = require(resolve(args.centroids));

var inputFile = args._[0];
var outputFile = args._[1];

var destinations = args.destinations.split(','); // FIPS numbers
var minTrips = parseInt(args.trips); // Minimum required paired trips
var minDistance = parseInt(args.minDistance) || 0;
var maxDistance = parseInt(args.maxDistance) || Infinity;

var pairs = !fs.existsSync(outputFile)
  ? []
  : JSON.parse(fs.readFileSync(outputFile, { encoding: 'utf8' }));

var file = fs.readFileSync(inputFile, { encoding: 'utf8' });
var lines = file.split('\n').slice(1);

for (var i = 0; i < lines.length; i++) lines[i] = lines[i].split(',');

lines.forEach(function(line) {
  if (!line[0] || !line[1]) return;
  if (destinations.indexOf(line[1].substring(0, 2)) === -1) return;

  var trips = parseInt(line[2]);
  if (trips < minTrips) return;

  var o = centroids[line[0]];
  var d = centroids[line[1]];

  if (!o || !d) return;

  var distance = haversine({
    longitude: o[0],
    latitude: o[1]
  }, {
    longitude: d[0],
    latitude: d[1]
  });

  if (distance > maxDistance || distance < minDistance) return;

  pairs.push([o, d, trips, distance]);
});

console.log(pairs.length + ' journeys found in ' + inputFile);

fs.writeFileSync(outputFile, JSON.stringify(pairs), { encoding: 'utf8' });
