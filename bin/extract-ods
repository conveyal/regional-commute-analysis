#!/usr/bin/env node

var args = require('minimist')(process.argv.slice(2));

var fs = require('fs');
var geojsonUtils = require('geojson-utils');
var haversine = require('haversine');
var resolve = require('path').resolve;
var bounds = require(resolve(args.bounds)).features[0].geometry;
var centroids = require(resolve(args.centroids));

var inputFile = args._[0];
var outputFile = args._[1];

var minTrips = parseInt(args.trips); // Minimum required paired trips
var minDistance = parseInt(args.minDistance) || 0;
var maxDistance = parseInt(args.maxDistance) || Infinity;

var file = fs.readFileSync(inputFile, { encoding: 'utf8' });
var lines = file.split('\n').slice(1);
var pairs = '';

var addHeader = !fs.existsSync(outputFile);
if (addHeader) {
  pairs += [
    'flng',
    'flat',
    'tlng',
    'tlat',
    'distance',
    'trips'
  ].join(',');
}

for (var i = 0; i < lines.length; i++) lines[i] = lines[i].split(',');

lines.forEach(function(line) {
  if (!line[0] || !line[1]) return;

  var trips = parseInt(line[2]);
  if (trips < minTrips) return;

  var d = centroids[line[0]];
  var o = centroids[line[1]];

  if (!o || !d) return;

  var gjfrom = {
    type: 'Point',
    coordinates: o
  };
  var gjto ={
    type: 'Point',
    coordinates: d
  };

  if (!geojsonUtils.pointInPolygon(gjto, bounds) &&
      !geojsonUtils.pointInPolygon(gjfrom, bounds)) return;

  var distance = haversine({
    longitude: o[0],
    latitude: o[1]
  }, {
    longitude: d[0],
    latitude: d[1]
  });

  if (distance > maxDistance || distance < minDistance) return;

  pairs += '\n' + [
    o[0],
    o[1],
    d[0],
    d[1],
    trips,
    distance
  ].join(',');
});

console.log(pairs.split('\n').length + ' journeys found in ' + inputFile);

fs.appendFileSync(outputFile, pairs, { encoding: 'utf8' });
