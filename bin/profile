#!/usr/bin/env node

var args = require('minimist')(process.argv.slice(2), {
  string: [ 'start', 'end' ]
});

var Batch = require('batch');
var resolve = require('path').resolve;
var factors = args.factors
  ? require(resolve(args.factors))
  : null;

var fs = require('fs');
var journeys = require(resolve(args._[0]));
var Profiler = require('otp-profiler');
var Progress = require('progress');

var batch = new Batch;
var profiler = new Profiler({
  host: args.host
});
var writer = fs.createWriteStream(args._[1], { encoding: 'utf8' });

batch.concurrency(args.concurrency);

console.log('profiling ' + journeys.length + ' journeys');

var errorWriter = fs.createWriteStream(args.errors, { encoding: 'utf8' });
var previous = false;
var progress = new Progress(':bar', { total: journeys.length });

journeys.forEach(function(journey) {
  batch.push(function(done) {
    profiler.profile({
      from: {
        lon: journey[0][0],
        lat: journey[0][1]
      },
      to: {
        lon: journey[1][0],
        lat: journey[1][1]
      },
      orderBy: 'AVG',
      modes: args.modes,
      startTime: args.start,
      endTime: args.end,
      limit: args.limit || 3,
    }, function(err, results) {
      if (err) {
        errorWriter.write(JSON.stringify({
          error: err,
          journey: journey
        }, 'utf8', function() {
          done();
        }));
      } else if (!results || !results.options || results.options.length < 1) {
        errorWriter.write(JSON.stringify({
          error: 'No results returned',
          journey: journey
        }), 'utf8', function() {
          done();
        });
      } else {
        var options = filterOptions(results.options);
        var s = JSON.stringify({
          journey: journey,
          options: options
        });

        if (previous) s = ',' + s;

        previous = true;
        writer.write(s, 'utf8', function() {
          done();
        });
      }
    });
  });
});

batch.on('progress', function() { progress.tick(); });

writer.write('[', 'utf8', function() {
  batch.end(function(err, results) {
    if (err) console.error(err);

    errorWriter.end(function() {
      writer.end(']', 'utf8', function() {
        process.exit();
      });
    });
  });
});

function filterOptions(options) {
  // Only keep the walkstep distance
  for (var i = 0; i < options.length; i++) {
    var o = options[i];

    // Shorten the walksteps
    if (o.walkSteps && o.walkSteps.length) {
      o.walkSteps = o.walkSteps.map(function(step) {
        return {
          distance: step.distance
        };
      });
    }

    // Shorten the segments
    if (o.segments && o.segments.length) {
      o.segments = o.segments.map(function(segment) {
        return {
          mode: segment.mode,
          rideStats: segment.rideStats,
          route: segment.route,
          segmentPatterns: segment.segmentPatterns.map(function(p) { return { nTrips: p.nTrips };}),
          walkDistance: segment.walkDistance,
          waitStats: segment.waitStats,
          walkTime: segment.walkTime
        };
      });
    }

    // Shorten the fares
    if (o.fares && o.fares.length) {
      o.fares = o.fares.map(function(fare) {
        return {
          low: fare.low,
          peak: fare.peak
        };
      });
    }
  }

  return options;
}
