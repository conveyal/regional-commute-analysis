#!/usr/bin/env node

var args = require('minimist')(process.argv.slice(2), {
  string: [ 'start', 'end' ]
});

var Batch = require('batch');
var resolve = require('path').resolve;

var fs = require('fs');
var ms = require('ms');
var Profiler = require('otp-profiler');
var Progress = require('progress');
var Scorer = require('otp-profile-score');

var batch = new Batch();
var profiler = new Profiler({
  host: args.host
});
var scorer = new Scorer();

var fd = fs.openSync(args._[1], 'a');
var first = true;

var headingBuf = new Buffer('{', 'utf8');
fs.writeSync(fd, headingBuf, 0, headingBuf.length);

var stats = {
  errors: 0,
  noResults: 0,
  noRoute: 0,
  noWalk: 0
};

batch.concurrency(args.concurrency);

var journeys = fs.readFileSync(resolve(args._[0]), { encoding: 'utf8' }).split('\n').slice(1);

journeys.forEach(function(journey) {
  batch.push(function(done) {
    profileJourney(journey.split(','), done);
  });
});

var last100speeds = [];
var last100total = 0;
var start = new Date();
var progress = new Progress('[:current/:total] :timeleft left - :average/avg :last/last - errors: :errors', {
  total: journeys.length,
  width: 20
});

batch.on('progress', function(e) {
  var elapsed = new Date() - start;
  var timeleft = (progress.percent == 100)
    ? 0
    : elapsed * (progress.total / progress.curr - 1);

  if (last100speeds.length >= 100)
    last100total -= last100speeds.shift();

  var speed = e.end - e.start;
  last100total += speed;
  last100speeds.push(speed);

  progress.tick({
    average: ms(last100total / last100speeds.length),
    errors: stats.errors,
    last: ms(speed),
    timeleft: ms(timeleft)
  });
});

batch.end(function(err, results) {
  if (err) console.error(err);

  var close = new Buffer('}', 'utf8');
  fs.writeSync(fd, close, 0, close.length);
  fs.closeSync(fd);

  console.log('stats:');
  console.log(JSON.stringify(stats, null, '\t'));
  process.exit();
});

function profileJourney(journey, complete) {
  var profileStart = new Date();
  profile(journey, function(err, results) {
    if (err) {
      stats.errors++;
      results = err;
    } else if (!results || !results.options) {
      stats.noResults++;
      results = [];
    } else {
      results = scorer.processOptions(results.options);
      results.forEach(function(option) {
        option.access.forEach(function(access) {
          delete access.geometry;
          delete access.walkSteps;
        });

        if (option.egress) option.egress.forEach(function(egress) {
          delete egress.geometry;
          delete egress.walkSteps;
        });

        if (option.transit) option.transit.forEach(function(transit) {
          delete transit.segmentPatterns;
        });

        delete option.fares;
        delete option.summary;
      });
    }

    var key = [ journey[0], journey[1], journey[2], journey[3] ].join(',');
    var string = '"' + key + '":' + JSON.stringify({
      responseTime: new Date() - profileStart,
      success: !err,
      from: [ parseFloat(journey[0]), parseFloat(journey[1]) ],
      to: [ parseFloat(journey[2]), parseFloat(journey[3]) ],
      trips: parseInt(journey[4]),
      results: results
    });

    if (!first) string = ',' + string;
    first = false;

    var buffer = new Buffer(string, 'utf8');
    fs.write(fd, buffer, 0, buffer.length, null, complete);
  });
}

function profile(journey, done) {
  profiler.profile({
    from: {
      lon: journey[0],
      lat: journey[1]
    },
    to: {
      lon: journey[2],
      lat: journey[3]
    },
    accessModes: 'WALK,BICYCLE',
    directModes: 'WALK,BICYCLE',
    egressModes: 'WALK',
    transitModes: 'BUS,TRAINISH',
    startTime: '06:00',
    endTime: '09:00',
    limit: 1 // just get the fastest
  }, done);
}
