#!/usr/bin/env node

var args = require('minimist')(process.argv.slice(2), {
  string: [ 'start', 'end' ]
});

var Batch = require('batch');
var resolve = require('path').resolve;
var factors = args.factors
  ? require(resolve(args.factors))
  : null;

var fs = require('fs');
var journeys = require(resolve(args._[0]));
var Profiler = require('otp-profiler');
var Progress = require('progress');

var batch = new Batch();
var profiler = new Profiler({
  host: args.host
});
var fd = fs.openSync(args._[1], 'a');

var stats = {
  errors: 0,
  noResults: 0,
  noRoute: 0,
  noWalk: 0
};

batch.concurrency(args.concurrency);

console.log('profiling ' + journeys.length + ' journeys');

var previous = false;
var progress = new Progress(':bar', { total: journeys.length });

journeys.forEach(function(journey) {
  batch.push(function(done) {
    profileJourney(journey, done);
  });
});

batch.on('progress', function() { progress.tick(); });

batch.end(function(err, results) {
  if (err) console.error(err);

  fs.closeSync(fd);

  console.log('stats:');
  console.log(JSON.stringify(stats, null, '\t'));
  process.exit();
});

function profileJourney(journey, complete) {
  var batch = new Batch();
  batch.push(function(done) {
    profile(journey, 'WALK', done);
  });

  batch.push(function(done) {
    profile(journey, 'BICYCLE', done);
  });

  batch.end(function(err, results) {
    if (err) {
      stats.errors++;
      return complete();
    } else if (!results) {
      stats.noResults++;
      return complete();
    }

    var walk = results[0].options || [];
    var bike = results[1].options || [];

    var bikeOpt = bike[1];
    var walkOpt = walk[1];

    if (!bikeOpt) {
      stats.noRoute++;
      return complete();
    }

    var data = {
      trip: journey,
      bike: bikeOpt.stats.avg,
      walk: 0
    };

    if (walkOpt) data.walk = walkOpt.stats.avg || 0;
    else stats.noWalk++;

    var csv = [ journey[0][0], journey[0][1], journey[1][0], journey[1][1], journey[2], journey[3], data.bike, data.walk ];

    var s = previous ? '\n' : '';
    var buffer = new Buffer(s + csv.join(','), 'utf8');

    previous = true;
    fs.write(fd, buffer, 0, buffer.length, null, complete);
  });
}

function profile(journey, accessModes, done) {
  profiler.profile({
    from: {
      lon: journey[0][0],
      lat: journey[0][1]
    },
    to: {
      lon: journey[1][0],
      lat: journey[1][1]
    },
    accessModes: accessModes,
    directModes: 'WALK,BICYCLE',
    egressModes: 'WALK',
    transitModes: 'BUS,TRAINISH',
    startTime: args.start,
    endTime: args.end,
    limit: 1
  }, done);
}
