#!/usr/bin/env node

var args = require('minimist')(process.argv.slice(2), {
  string: [ 'start', 'end' ]
});

var Batch = require('batch');
var resolve = require('path').resolve;

var fs = require('fs');
var ms = require('ms');
var Profiler = require('otp-profiler');
var Progress = require('progress');
var Scorer = require('otp-profile-score');

var batch = new Batch();
var profiler = new Profiler({
  host: args.host
});
var scorer = new Scorer();

var writeHeader = !fs.existsSync(args._[1]);
var fd = fs.openSync(args._[1], 'a');
var errorFd = fs.openSync('data/errors.json', 'w');

if (writeHeader) {
  var headingBuf = new Buffer('flng,flat,tlng,tlat,trips,distance,dbike,dwalk,tbike,twalk', 'utf8');
  fs.writeSync(fd, headingBuf, 0, headingBuf.length);
}

var stats = {
  errors: 0,
  noResults: 0,
  noRoute: 0,
  noWalk: 0
};

batch.concurrency(args.concurrency);

var journeys = fs.readFileSync(resolve(args._[0]), { encoding: 'utf8' }).split('\n').slice(1);

journeys.forEach(function(journey) {
  batch.push(function(done) {
    profileJourney(journey.split(','), done);
  });
});

var last100speeds = [];
var last100total = 0;
var start = new Date();
var progress = new Progress('profiling: [:current/:total] :timeleft :average/avg :last/last', {
  total: journeys.length,
  width: 20
});

batch.on('progress', function(e) {
  var elapsed = new Date() - start;
  var timeleft = (progress.percent == 100)
    ? 0
    : elapsed * (progress.total / progress.curr - 1);

  if (last100speeds.length >= 100)
    last100total -= last100speeds.shift();
  var speed = e.end - e.start;
  last100total += speed;
  last100speeds.push(speed);

  progress.tick({
    average: ms(last100total / last100speeds.length),
    last: ms(speed),
    timeleft: ms(timeleft)
  });
});

batch.end(function(err, results) {
  if (err) console.error(err);

  fs.closeSync(fd);
  fs.closeSync(errorFd);

  console.log('stats:');
  console.log(JSON.stringify(stats, null, '\t'));
  process.exit();
});

function profileJourney(journey, complete) {
  profile(journey, function(err, results) {
    if (err) {
      stats.errors++;
      return saveFailedOtpQuery(err, complete);
    } else if (!results || !results.options) {
      stats.noResults++;
      return complete();
    }

    var options = scorer.processOptions(results.options);

    var dwalk = getOpt(options, 'WALK', true);
    var dbike = getOpt(options, 'BICYCLE', true);
    var twalk = getOpt(options, 'WALK', false);
    var tbike = getOpt(options, 'BICYCLE', false);

    if (!dbike && !tbike) {
      stats.noRoute++;
      return complete();
    }

    if (!dwalk && !twalk) stats.noWalk++;

    dwalk = getOptData(dwalk);
    dbike = getOptData(dbike, true);
    twalk = getOptData(twalk);
    tbike = getOptData(tbike, true);

    var csv = [
      journey[0], // from lng
      journey[1], // from lat
      journey[2], // to lng
      journey[3], // to lat
      journey[4], // trips (used as a multiplier on the client)
      journey[5], // distance (haversine)
      dbike.time, // direct bike time
      dbike.distance, // direct bike distance
      dwalk.time, // direct walk time
      dwalk.distance, // direct walk distance
      tbike.time, // transit
      tbike.distance, // bike to transit distance
      twalk.time, // walk to transit total trip time
      twalk.distance // total walking distance
    ];
    var buffer = new Buffer('\n' + csv.join(','), 'utf8');
    fs.write(fd, buffer, 0, buffer.length, null, complete);
  });
}

function profile(journey, done) {
  profiler.profile({
    from: {
      lon: journey[0],
      lat: journey[1]
    },
    to: {
      lon: journey[2],
      lat: journey[3]
    },
    accessModes: 'WALK,BICYCLE',
    directModes: 'WALK,BICYCLE',
    egressModes: 'WALK',
    transitModes: 'BUS,TRAINISH',
    startTime: '06:00',
    endTime: '09:00',
    limit: 1 // just get the fastest
  }, done);
}

function getOpt(options, mode, direct) {
  for (var i = 0; i < options.length; i++) {
    var option = options[i];
    if (option.access[0].mode === mode) {
      if (direct) {
        if (!option.transit || option.transit.length === 0) {
          return option;
        }
      } else {
        if (option.transit && option.transit.length > 0) {
          return option;
        }
      }
    }
  }
}

function getOptData(opt, isBike) {
  var data = {
    time: 0,
    distance: 0
  };

  if (opt) {
    data.time = opt.stats.avg;
    if (isBike) {
      data.distance = opt.bikeDistance;
    } else {
      data.distance = opt.walkDistance;
    }
  }

  return data;
}

function saveFailedOtpQuery(error, done) {
  var buffer = new Buffer(',\n' + JSON.stringify(error, null, '\t'), 'utf8');
  fs.write(errorFd, buffer, 0, buffer.length, null, done);
}
